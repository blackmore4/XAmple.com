// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18033
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace XAmple.Specs.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
<<<<<<< HEAD
    [NUnit.Framework.DescriptionAttribute("Verifying a deployment")]
    public partial class VerifyingADeploymentFeature
=======
    [NUnit.Framework.DescriptionAttribute("Verify Deployment")]
    public partial class VerifyDeploymentFeature
>>>>>>> 50936e173b1bbe559093c182e93ee64f170cc439
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "VerifyDeployment.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
<<<<<<< HEAD
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Verifying a deployment", "", ProgrammingLanguage.CSharp, ((string[])(null)));
=======
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Verify Deployment", "", ProgrammingLanguage.CSharp, ((string[])(null)));
>>>>>>> 50936e173b1bbe559093c182e93ee64f170cc439
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
<<<<<<< HEAD
        public virtual void FeatureBackground()
        {
#line 10
#line 11
 testRunner.Given("I have knowledge of the desired application version", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify that the application has been pushed to the entire farm")]
        [NUnit.Framework.TestCaseAttribute("http://wfe1.test.example.com", new string[] {
                "environment.test"})]
        [NUnit.Framework.TestCaseAttribute("http://wfe2.test.example.com", new string[] {
                "environment.test"})]
        public virtual void VerifyThatTheApplicationHasBeenPushedToTheEntireFarm(string url, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify that the application has been pushed to the entire farm", exampleTags);
#line 13
this.ScenarioSetup(scenarioInfo);
#line 10
this.FeatureBackground();
#line 14
 testRunner.When(string.Format("I retrieve the current application version from {0}", url), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 15
 testRunner.Then("the desired version should match the application version", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
=======
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify that deployment to the test environment was successful")]
        [NUnit.Framework.CategoryAttribute("environment.test")]
        public virtual void VerifyThatDeploymentToTheTestEnvironmentWasSuccessful()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify that deployment to the test environment was successful", new string[] {
                        "environment.test"});
#line 5
this.ScenarioSetup(scenarioInfo);
#line 6
 testRunner.Given("I have already retrieved the application version", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 7
 testRunner.When("I retrieve the build version", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 8
 testRunner.Then("the application version and the build version should match", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
>>>>>>> 50936e173b1bbe559093c182e93ee64f170cc439
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
